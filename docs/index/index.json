{"interfaceLanguages":{"swift":[{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/leetcode\/index","title":"Neetcode","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0155\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0155\/getmin()","title":"func getMin() -> Int","type":"method"},{"path":"\/documentation\/leetcode\/solution_0155\/pop()","title":"func pop()","type":"method"},{"path":"\/documentation\/leetcode\/solution_0155\/push(_:)","title":"func push(Int)","type":"method"},{"path":"\/documentation\/leetcode\/solution_0155\/top()","title":"func top() -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0155","title":"Solution_0155","type":"class"},{"path":"\/documentation\/leetcode\/solution_0981","title":"Solution_0981","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0001\/twosum(_:_:)","title":"static func twoSum([Int], Int) -> [Int]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0001","title":"Solution_0001","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0004\/findmediansortedarrays(_:_:)","title":"static func findMedianSortedArrays([Int], [Int]) -> Double","type":"method"}],"path":"\/documentation\/leetcode\/solution_0004","title":"Solution_0004","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0011\/maxarea(_:)","title":"static func maxArea([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0011","title":"Solution_0011","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0015\/threesum(_:)","title":"static func threeSum([Int]) -> [[Int]]","type":"method"},{"path":"\/documentation\/leetcode\/solution_0015\/threesumcheckduplicatesmanually(_:)","title":"static func threeSumCheckDuplicatesManually([Int]) -> [[Int]]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0015","title":"Solution_0015","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0020\/isvalid(_:)","title":"static func isValid(String) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0020","title":"Solution_0020","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0021\/mergetwolists(_:_:)","title":"static func mergeTwoLists(ListNode?, ListNode?) -> ListNode?","type":"method"},{"path":"\/documentation\/leetcode\/solution_0021\/mergetwolistsiteratively(_:_:)","title":"static func mergeTwoListsIteratively(ListNode?, ListNode?) -> ListNode?","type":"method"}],"path":"\/documentation\/leetcode\/solution_0021","title":"Solution_0021","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0022\/generateparenthesis(_:)","title":"static func generateParenthesis(Int) -> [String]","type":"method"},{"path":"\/documentation\/leetcode\/solution_0022\/generateparenthesisdynamicprogramming(_:)","title":"static func generateParenthesisDynamicProgramming(Int) -> [String]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0022","title":"Solution_0022","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0033\/search(_:_:)","title":"static func search([Int], Int) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0033","title":"Solution_0033","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0036\/isvalidsudoku(_:)","title":"static func isValidSudoku([[Character]]) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0036","title":"Solution_0036","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0042\/trap(_:)","title":"static func trap([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0042","title":"Solution_0042","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0049\/groupanagrams(_:)","title":"static func groupAnagrams([String]) -> [[String]]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0049","title":"Solution_0049","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0074\/searchmatrix(_:_:)","title":"static func searchMatrix([[Int]], Int) -> Bool","type":"method"},{"path":"\/documentation\/leetcode\/solution_0074\/searchmatrix2dalgorithm(_:_:)","title":"static func searchMatrix2DAlgorithm([[Int]], Int) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0074","title":"Solution_0074","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0084\/largestrectanglearea(_:)","title":"static func largestRectangleArea([Int]) -> Int","type":"method"},{"path":"\/documentation\/leetcode\/solution_0084\/largestrectangleareacondensed(_:)","title":"static func largestRectangleAreaCondensed([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0084","title":"Solution_0084","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0100\/issametree(_:_:)","title":"static func isSameTree(TreeNode?, TreeNode?) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0100","title":"Solution_0100","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0104\/maxdepth(_:)","title":"static func maxDepth(TreeNode?) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0104","title":"Solution_0104","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0110\/isbalanced(_:)","title":"static func isBalanced(TreeNode?) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0110","title":"Solution_0110","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0121\/maxprofit(_:)","title":"static func maxProfit([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0121","title":"Solution_0121","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0125\/ispalindrome(_:)","title":"static func isPalindrome(String) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0125","title":"Solution_0125","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0128\/longestconsecutivesequence(_:)","title":"static func longestConsecutiveSequence([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0128","title":"Solution_0128","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0150\/evalrpn(_:)","title":"static func evalRPN([String]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0150","title":"Solution_0150","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0153\/findmin(_:)","title":"static func findMin([Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0153","title":"Solution_0153","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0167\/twosum(_:_:)","title":"static func twoSum([Int], Int) -> [Int]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0167","title":"Solution_0167","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0206\/reverselist(_:)","title":"static func reverseList(ListNode?) -> ListNode?","type":"method"}],"path":"\/documentation\/leetcode\/solution_0206","title":"Solution_0206","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0217\/containsduplicate(_:)","title":"static func containsDuplicate([Int]) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0217","title":"Solution_0217","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0226\/inverttree(_:)","title":"static func invertTree(TreeNode?) -> TreeNode?","type":"method"}],"path":"\/documentation\/leetcode\/solution_0226","title":"Solution_0226","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0238\/productexceptself(_:)","title":"static func productExceptSelf([Int]) -> [Int]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0238","title":"Solution_0238","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0242\/isanagram(_:_:)","title":"static func isAnagram(String, String) -> Bool","type":"method"}],"path":"\/documentation\/leetcode\/solution_0242","title":"Solution_0242","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0271\/decode(_:)","title":"static func decode(String) -> [String]","type":"method"},{"path":"\/documentation\/leetcode\/solution_0271\/encode(_:)","title":"static func encode([String]) -> String","type":"method"}],"path":"\/documentation\/leetcode\/solution_0271","title":"Solution_0271","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0347\/topkfrequent(_:_:)","title":"static func topKFrequent([Int], Int) -> [Int]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0347","title":"Solution_0347","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0543\/diameterofbinarytree(_:)","title":"static func diameterOfBinaryTree(TreeNode?) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0543","title":"Solution_0543","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0704\/search(_:_:)","title":"static func search([Int], Int) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0704","title":"Solution_0704","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0739\/dailytemperatures(_:)","title":"static func dailyTemperatures([Int]) -> [Int]","type":"method"}],"path":"\/documentation\/leetcode\/solution_0739","title":"Solution_0739","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0853\/carfleet(_:_:_:)","title":"static func carFleet(Int, [Int], [Int]) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0853","title":"Solution_0853","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/leetcode\/solution_0875\/mineatingspeed(_:_:)","title":"static func minEatingSpeed([Int], Int) -> Int","type":"method"}],"path":"\/documentation\/leetcode\/solution_0875","title":"Solution_0875","type":"struct"}],"path":"\/documentation\/leetcode","title":"leetcode","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}